@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthStateProvider
@using BaseLibrary.DTOs
@using ClientLibrary.Helpers

@inject IJSRuntime JSRuntime
<div class="sidebar">
    <div class="top-row navbar navbar-dark">
        <div class="container-fluid navbar-header">
            <button title="Navigation menu" class="navbar-toggler" @onclick="AlwaysToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
            <a class="@NavMenuCssClass navbar-brand" href="">
                <AuthorizeView>
                    <Authorized>Hi, @context.User.Identity!.Name</Authorized>
                    <NotAuthorized>Welcome Guest</NotAuthorized>
                </AuthorizeView>
            </a>
        </div>
    </div>

    <div class="@NavMenuCssClass never-collapse nav-scrollable flex-column justify-content-between flex-grow">
        <nav class="flex-column">
            <div class="nav-item px-3">
                <NavLink class="nav-link align-items-center" href="" Match="NavLinkMatch.All" @onclick="ToggleNavMenu">
                    <i class="bi bi-house-door-fill" style="width: 2rem;" aria-hidden="true"></i>
                    <p class="@NavMenuCssClass list-item-text p-0 m-0"> Home</p>
                </NavLink>
            </div>

            <AuthorizeView>
            </AuthorizeView>
        </nav>
        <nav class="flex-column">
            <AuthorizeView>
                <NotAuthorized>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="identity/account/login">
                            <i class="bi bi-door-open-fill" style="width: 2rem;" aria-hidden="true"></i>
                            <p class="@NavMenuCssClass list-item-text p-0 m-0"> Login</p>
                        </NavLink>
                    </div>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="identity/account/register">
                            <i class="bi bi-person-fill-add" style="width: 2rem;" aria-hidden="true"></i>
                            <p class="@NavMenuCssClass list-item-text p-0 m-0"> Register</p>
                        </NavLink>
                    </div>
                </NotAuthorized>
                <Authorized>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link text-danger" style="cursor: pointer" @onclick="logoutClicked">
                            <i class="bi bi-door-closed-fill" style="width: 2rem;" aria-hidden="true"></i>
                            <p class="@NavMenuCssClass list-item-text p-0 m-0"> Logout</p>
                        </NavLink>
                    </div>
                </Authorized>
            </AuthorizeView>
        </nav>
    </div>
</div>

@code {
    private bool IsWideScreen;
    private bool collapseNavMenu = true;

    private bool MediaQueryMatch(string mediaQueryString)
    {
        return ((MarkupString)$"<style>@media {mediaQueryString} {{#__media-query-match{{}}</style>")
            .ToString()
            .Contains("#__media-query-match");
    }

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : "@NavMenuCssClass";

    private void ToggleNavMenu()
    {
        IsWideScreen = MediaQueryMatch("(min-width: 641px)");
        if (IsWideScreen) { return; }
        collapseNavMenu = !collapseNavMenu;
    }

    private void AlwaysToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    async Task logoutClicked()
    {
        ToggleNavMenu();
        var logoutModel = new UserSession();
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(logoutModel);
        NavManager.NavigateTo("/", forceLoad: true);
    }
}