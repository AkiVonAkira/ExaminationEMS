<Modal @ref="manageRoleDialog" @bind-Visible="IsVisible">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Update User</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field Model="manageRole" OnSubmit="@SaveChanges">
                <Field>
                    <Heading TextSize="TextSize.Medium" Class="mb-2">Users Name</Heading>
                    <TextEdit Placeholder="Enter name..." @bind-Text="ManageUser.Name" />
                </Field>
                <Field>
                    <Heading TextSize="TextSize.Medium" Class="mb-2">Email</Heading>
                    <TextEdit Placeholder="Enter Email..." @bind-Text="ManageUser.Email" />
                </Field>
                <Field>
                    <Heading TextSize="TextSize.Medium" Class="mb-2">Select Role</Heading>
                    @if (ManageUser.Role != null)
                    {
                        ChangeSelectedRole(GetRoleName(ManageUser.Role));
                        <DropdownList TItem="SystemRole" TValue="SystemRole"
                                      Data="@SystemRoles"
                                      TextField="@((item)=>item.Name)"
                                      ValueField="@((item)=>item)"
                                      Color="Color.Primary"
                                      MaxMenuHeight="200px"
                                      SelectedValueChanged="OnValueChange">
                            @if (!string.IsNullOrEmpty(selectedRole))
                            {
                                <Span>@selectedRole</Span>
                            }
                            else
                            {
                                <Span>Select</Span>
                            }
                        </DropdownList>
                    }
                </Field>
            </Field>
        </ModalBody>
        <ModalFooter Class="justify-end">
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Color="Color.Primary" Type="ButtonType.Submit" Clicked="@SaveChanges">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@code {
    [Inject] IToastService? ToastService { get; set; }

    [Parameter] public ManageUser ManageUser { get; set; } = new();
    [Parameter] public List<SystemRole> SystemRoles { get; set; } = new();
    [Parameter] public EventCallback<ManageUser> HandleSaveOperationEvent { get; set; }
    string selectedRole { get; set; } = "";

    public bool IsVisible { get; set; } = false;
    public void OpenDialog()
    {
        IsVisible = true;
        ShowModal();
        StateHasChanged();
    }

    public async Task SaveChanges()
    {
        if (string.IsNullOrEmpty(ManageUser.Name) || string.IsNullOrEmpty(ManageUser.Role))
            await ToastService!.Error("Role name is required", "Missing Field");
        else
        {
            IsVisible = false;
            await HandleSaveOperationEvent.InvokeAsync(ManageUser);
            await ToastService!.Success("Role added successfully", "Saved Changes");
        }
    }

    public void ChangeSelectedRole(string selected)
    {
        selectedRole = selected;
    }

    // reference to the modal component
    private Modal? manageRoleDialog;

    private Task ShowModal()
    {
        return manageRoleDialog!.Show();
    }

    private Task HideModal()
    {
        IsVisible = false;
        return manageRoleDialog!.Hide();
    }

    private string GetRoleName(string name)
    {
        return SystemRoles.FirstOrDefault(x => x.Name == name)?.Name ?? string.Empty;
    }

    public void OnValueChange(SystemRole args)
    {
        ManageUser.Role = args.Name;
        ChangeSelectedRole(args.Name!);
        StateHasChanged();
    }
}