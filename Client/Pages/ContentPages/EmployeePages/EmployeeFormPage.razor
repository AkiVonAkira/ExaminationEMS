@implements IDisposable

@if (allState.ShowEmployee)
{
    if (ShowEmployeeForm)
    {
        <Container Fluid>
            @* Employee Form *@
            <Div Class="my-4">
                <Card Class="mb-4 px-4 !bg-transparent">
                    <CardHeader>
                        @Title Employee
                        <CloseButton onclick="@CloseForm" Class="float-end"></CloseButton>
                    </CardHeader>
                </Card>
                <Row Class="justify-center gap-8">
                    @if (FirstLayer)
                    {
                        <Row>
                            <Badge Color="Color.Primary" Class="me-2">1</Badge>
                            <Div Class="flex items-center w-32 sm:w-72 md:w-92">
                                <Progress Value="100" Striped Class="h-fit" />
                            </Div>
                        </Row>
                        <Row>
                            <Badge Color="Color.Primary" Class="me-2">2</Badge>
                            <Div Class="flex items-center w-32 sm:w-72 md:w-92">
                                <Progress Value="0" Height="Height.Is100" Class="h-fit" />
                            </Div>
                        </Row>
                    }
                    @if (SecondLayer)
                    {
                        <Row>
                            <Badge Color="Color.Primary" Class="me-2">1</Badge>
                            <Div Class="flex items-center w-32 sm:w-72 md:w-92">
                                <Progress Value="100" Striped Class="h-fit" />
                            </Div>
                        </Row>
                        <Row>
                            <Badge Color="Color.Primary" Class="me-2">2</Badge>
                            <Div Class="flex items-center w-32 sm:w-72 md:w-92">
                                <Progress Value="50" Striped Class="h-fit" />
                            </Div>
                        </Row>
                    }
                </Row>
            </Div>
            @* First Layer *@
            @if (FirstLayer)
            {
                <EditForm Enhance OnValidSubmit="Form1" Model="EmployeeGroup1">
                    <Column Class="mb-4">
                        <Row Class="!justify-center" Gap="Gap.Is4">
                            <Card Class="text-white bg-dark">
                                <CardBody>
                                    <CardTitle>Personal Information</CardTitle>
                                    <Validation>
                                        <Field Vertical>
                                            <FieldLabel ColumnSize="ColumnSize.Is2">Full Name</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.Is10">
                                                <TextEdit @bind-Text="@EmployeeGroup1.Name">
                                                </TextEdit>
                                                @* <ValidationMessage For="() => EmployeeGroup1.Name" /> *@
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                    <Validation>
                                        <Field Vertical>
                                            <FieldLabel ColumnSize="ColumnSize.Is2">Phone Number</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.Is10">
                                                <TextEdit @bind-Text="@EmployeeGroup1.PhoneNumber">
                                                </TextEdit>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                    <Validation>
                                        <Field Vertical>
                                            <FieldLabel ColumnSize="ColumnSize.Is2">Address</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.Is10">
                                                <TextEdit @bind-Text="@EmployeeGroup1.Address">
                                                </TextEdit>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                </CardBody>
                            </Card>
                            @* col 2 *@
                            <Card Class="text-white bg-dark">
                                <CardBody>
                                    <CardTitle>Other Information</CardTitle>
                                    <Validation>
                                        <Field Vertical>
                                            <FieldLabel ColumnSize="ColumnSize.Is2">File Number</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.Is10">
                                                <TextEdit @bind-Text="@EmployeeGroup1.FileNumber">
                                                </TextEdit>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                    <Validation>
                                        <Field Vertical>
                                            <FieldLabel ColumnSize="ColumnSize.Is2">Social Security Number</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.Is10">
                                                <TextEdit @bind-Text="@EmployeeGroup1.SocialSecurityNumber">
                                                </TextEdit>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                    <Validation>
                                        <Field Vertical>
                                            <FieldLabel ColumnSize="ColumnSize.Is2">Photo</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.Is10">
                                                <TextEdit @bind-Text="@EmployeeGroup1.Photo">
                                                </TextEdit>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                </CardBody>
                                @if (!string.IsNullOrEmpty(errorMessage))
                                {
                                    <ListGroup Flush Class="p-2 !border-y-0 !bg-transparent">
                                        <ListGroupItem Color="Color.Danger" Class="rounded">@errorMessage</ListGroupItem>
                                    </ListGroup>
                                }
                            </Card>
                        </Row>
                        <div class="flex flex-row justify-center align-center mt-3 px-2 gap-2 w-48">
                            <Button Color="Color.Danger" onclick="@CloseForm">
                                <i class="fa fa-x mr-2"></i> Cancel
                            </Button>
                            <Button Color="Color.Primary" Type="ButtonType.Submit">
                                <i class="fa fa-arrow-right mr-2"></i> Next
                            </Button>
                        </div>
                    </Column>
                </EditForm>
            }
            @* Second Layer *@
            @if (SecondLayer)
            {
                <EditForm Enhance OnValidSubmit="Form2" Model="EmployeeGroup2">
                    <Column Class="mb-4">
                        <Row Class="!justify-center" Gap="Gap.Is4">
                            <Card Class="text-white bg-dark">
                                <CardBody>
                                    <CardTitle>Job Information</CardTitle>
                                    <Validation>
                                        <Field Vertical>
                                            <FieldLabel ColumnSize="ColumnSize.Is2">Job Title</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.Is10">
                                                <TextEdit @bind-Text="@EmployeeGroup2.JobTitle">
                                                </TextEdit>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                    <Validation>
                                        <Field Vertical>
                                            <FieldLabel ColumnSize="ColumnSize.Is2">General Department</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.Is10">
                                                <DropdownList TItem="GeneralDepartment" TValue="int" Data="@GeneralDepartments"
                                                              TextField="@((item)=>item.Name)" ValueField="@((item)=>item.Id)"
                                                              Color="Color.Primary" MaxMenuHeight="200px"
                                                              SelectedValueChanged="OnGeneralDepartmentValueChange">
                                                    @if (!string.IsNullOrEmpty(selectedGeneralDepartment))
                                                    {
                                                        <Span>@selectedGeneralDepartment</Span>
                                                    }
                                                    else
                                                    {
                                                        <Span>Select General Department</Span>
                                                    }
                                                </DropdownList>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                    <Validation>
                                        <Field Vertical>
                                            <FieldLabel ColumnSize="ColumnSize.Is2">Department</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.Is10">
                                                <DropdownList TItem="Department" TValue="int" Data="@Departments"
                                                              TextField="@((item)=>item.Name)" ValueField="@((item)=>item.Id)"
                                                              Color="Color.Primary" MaxMenuHeight="200px"
                                                              SelectedValueChanged="OnDepartmentValueChange">
                                                    @if (!string.IsNullOrEmpty(selectedDepartment))
                                                    {
                                                        <Span>@selectedDepartment</Span>
                                                    }
                                                    else
                                                    {
                                                        <Span>Select Department</Span>
                                                    }
                                                </DropdownList>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                    <Validation>
                                        <Field Vertical>
                                            <FieldLabel ColumnSize="ColumnSize.Is2">Section</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.Is10">
                                                <DropdownList TItem="Section" TValue="int" Data="@Sections"
                                                              TextField="@((item)=>item.Name)" ValueField="@((item)=>item.Id)"
                                                              Color="Color.Primary" MaxMenuHeight="200px"
                                                              SelectedValueChanged="OnSectionValueChange">
                                                    @if (!string.IsNullOrEmpty(selectedSection))
                                                    {
                                                        <Span>@selectedSection</Span>
                                                    }
                                                    else
                                                    {
                                                        <Span>Select Section</Span>
                                                    }
                                                </DropdownList>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                </CardBody>
                                @if (!string.IsNullOrEmpty(errorMessage))
                                {
                                    <ListGroup Flush Class="p-2 !border-y-0 !bg-transparent">
                                        <ListGroupItem Color="Color.Danger" Class="rounded">@errorMessage</ListGroupItem>
                                    </ListGroup>
                                }
                            </Card>
                            @* col 2 *@
                            <Card Class="text-white bg-dark">
                                <CardBody>
                                    <CardTitle>Location Information</CardTitle>
                                    <Validation>
                                        <Field Vertical>
                                            <FieldLabel ColumnSize="ColumnSize.Is2">Country</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.Is10">
                                                <DropdownList TItem="Country" TValue="int" Data="@Countries"
                                                              TextField="@((item)=>item.Name)" ValueField="@((item)=>item.Id)"
                                                              Color="Color.Primary" MaxMenuHeight="200px"
                                                              SelectedValueChanged="OnCountryValueChange">
                                                    @if (!string.IsNullOrEmpty(selectedCountry))
                                                    {
                                                        <Span>@selectedCountry</Span>
                                                    }
                                                    else
                                                    {
                                                        <Span>Select Country</Span>
                                                    }
                                                </DropdownList>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                    <Validation>
                                        <Field Vertical>
                                            <FieldLabel ColumnSize="ColumnSize.Is2">City</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.Is10">
                                                <DropdownList TItem="City" TValue="int" Data="@Cities"
                                                              TextField="@((item)=>item.Name)" ValueField="@((item)=>item.Id)"
                                                              Color="Color.Primary" MaxMenuHeight="200px"
                                                              SelectedValueChanged="OnCityValueChange">
                                                    @if (!string.IsNullOrEmpty(selectedCity))
                                                    {
                                                        <Span>@selectedCity</Span>
                                                    }
                                                    else
                                                    {
                                                        <Span>Select City</Span>
                                                    }
                                                </DropdownList>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                    <Validation>
                                        <Field Vertical>
                                            <FieldLabel ColumnSize="ColumnSize.Is2">Town</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.Is10">
                                                <DropdownList TItem="Town" TValue="int" Data="@Towns"
                                                              TextField="@((item)=>item.Name)" ValueField="@((item)=>item.Id)"
                                                              Color="Color.Primary" MaxMenuHeight="200px"
                                                              SelectedValueChanged="OnTownValueChange">
                                                    @if (!string.IsNullOrEmpty(selectedTown))
                                                    {
                                                        <Span>@selectedTown</Span>
                                                    }
                                                    else
                                                    {
                                                        <Span>Select Town</Span>
                                                    }
                                                </DropdownList>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                    <Field Vertical>
                                        <FieldLabel ColumnSize="ColumnSize.Is2">Description</FieldLabel>
                                        <FieldBody ColumnSize="ColumnSize.Is10">
                                            <InputTextArea class="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 disabled:cursor-not-allowed disabled:opacity-75 p-2.5 text-sm bg-gray-50 border border-primary-500 text-white-900 placeholder-primary-700 focus:ring-primary-500 dark:bg-gray-700 focus:border-primary-500 dark:text-primary-500 dark:placeholder-primary-500 dark:border-primary-500"
                                                           Placeholder="Optional"
                                                           @bind-Value="@EmployeeGroup2.Description">
                                            </InputTextArea>
                                        </FieldBody>
                                    </Field>
                                </CardBody>
                                @if (!string.IsNullOrEmpty(errorMessage))
                                {
                                    <ListGroup Flush Class="p-2 !border-y-0 !bg-transparent">
                                        <ListGroupItem Color="Color.Danger" Class="rounded">@errorMessage</ListGroupItem>
                                    </ListGroup>
                                }
                            </Card>
                        </Row>
                        <div class="flex flex-row justify-center align-center mt-3 px-2 gap-2 w-48">
                            <Button Color="Color.Secondary" onclick="@ToggleForms">
                                <i class="fa fa-arrow-left mr-2"></i> Back
                            </Button>
                            <Button Color="Color.Primary" Type="ButtonType.Submit">
                                <i class="fa fa-arrow-right mr-2"></i> Submit
                            </Button>
                        </div>
                    </Column>
                </EditForm>
            }
        </Container>
    }
}

@code {
    [Inject] IToastService? ToastService { get; set; }

    // Validation
    Validations? validations;
    public string errorMessage { get; set; } = "";

    [Parameter] public Employee Employee { get; set; } = new();
    [Parameter] public EmployeeGrouping1 EmployeeGroup1 { get; set; } = new();
    [Parameter] public EmployeeGrouping2 EmployeeGroup2 { get; set; } = new();

    // Lists
    [Parameter] public List<Country> Countries { get; set; } = new();
    [Parameter] public List<City> Cities { get; set; } = new();
    [Parameter] public List<Town> Towns { get; set; } = new();

    [Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    [Parameter] public List<Department> Departments { get; set; } = new();
    [Parameter] public List<Section> Sections { get; set; } = new();

    // Bools and strings
    [Parameter] public bool ShowEmployeeForm { get; set; }
    bool FirstLayer { get; set; } = true;
    bool SecondLayer { get; set; } = false;

    [Parameter] public string Title { get; set; } = "Add";
    string selectedCountry { get; set; } = "";
    string selectedCity { get; set; } = "";
    string selectedTown { get; set; } = "";

    string selectedGeneralDepartment { get; set; } = "";
    string selectedDepartment { get; set; } = "";
    string selectedSection { get; set; } = "";


    public void ChangeTitle(string title)
    {
        Title = title;
    }

    public void ToggleForms()
    {
        FirstLayer = !FirstLayer;
        SecondLayer = !SecondLayer;
        Dispose();
    }

    // Form Closed
    [Parameter] public EventCallback NotifyParentFormClosed { get; set; }
    async Task CloseForm()
    {
        ShowEmployeeForm = false;
        await NotifyParentFormClosed.InvokeAsync();
    }

    // Form Validation
    // Form 1
    private bool ValidateEmployeeGroup1()
    {
        if (string.IsNullOrEmpty(EmployeeGroup1.Name)
        || string.IsNullOrEmpty(EmployeeGroup1.PhoneNumber)
        || string.IsNullOrEmpty(EmployeeGroup1.Address)
        || string.IsNullOrEmpty(EmployeeGroup1.Photo)
        || string.IsNullOrEmpty(EmployeeGroup1.SocialSecurityNumber)
        || string.IsNullOrEmpty(EmployeeGroup1.FileNumber))
            return false;
        else
            return true;
    }

    // Form 2
    private bool ValidateEmployeeGroup2()
    {
        if (string.IsNullOrEmpty(EmployeeGroup2.JobTitle)
        || EmployeeGroup2.TownId == 0
        || EmployeeGroup2.SectionId == 0)
            return false;
        else
            return true;
    }

    [Parameter] public EventCallback<Employee> HandleSaveEmployeeClickedEvent { get; set; }
    private void Form1()
    {
        var isValid = ValidateEmployeeGroup1();

        if (isValid)
        {
            Employee.Name = EmployeeGroup1.Name;
            Employee.PhoneNumber = EmployeeGroup1.PhoneNumber;
            Employee.Address = EmployeeGroup1.Address;
            Employee.Photo = EmployeeGroup1.Photo;
            Employee.SocialSecurityNumber = EmployeeGroup1.SocialSecurityNumber;
            Employee.FileNumber = EmployeeGroup1.FileNumber;

            ToggleForms();
        }
    }

    private async Task Form2()
    {
        var isValid = ValidateEmployeeGroup2();

        if (isValid)
        {
            Employee.JobTitle = EmployeeGroup2.JobTitle;
            Employee.Description = EmployeeGroup2.Description;
            Employee.TownId = EmployeeGroup2.TownId;
            Employee.SectionId = EmployeeGroup2.SectionId;

            await HandleSaveEmployeeClickedEvent.InvokeAsync(Employee);
            await CloseForm();
            ClearContent();
        }
    }

    public void ClearContent()
    {
        EmployeeGroup1 = new();
        EmployeeGroup2 = new();
        Employee = new();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        allState.Action += StateHasChanged;
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }

    // Value Change related code

    // country, city and town
    [Parameter] public EventCallback<int> HandleCountrySelectedEvent { get; set; }
    public void OnCountryValueChange(int value)
    {
        HandleCountrySelectedEvent.InvokeAsync(value);
        ChangeSelectedCountry(GetCountryNameByID(value));
    }

    [Parameter] public EventCallback<int> HandleCitySelectedEvent { get; set; }
    public async Task OnCityValueChange(int value)
    {
        await HandleCitySelectedEvent.InvokeAsync(value);
        ChangeSelectedCity(GetCityNameByID(value));
    }

    [Parameter] public EventCallback<int> HandleTownSelectedEvent { get; set; }
    public void OnTownValueChange(int value)
    {
        EmployeeGroup2.TownId = value;
        ChangeSelectedTown(GetTownNameByID(value));
    }

    // general dep, dep and section
    [Parameter] public EventCallback<int> HandleGeneralDepartmentSelectedEvent { get; set; }
    public void OnGeneralDepartmentValueChange(int value)
    {
        HandleGeneralDepartmentSelectedEvent.InvokeAsync(value);
        ChangeSelectedGeneralDepartment(GetGeneralDepartmentNameByID(value));
    }

    [Parameter] public EventCallback<int> HandleDepartmentSelectedEvent { get; set; }
    public async Task OnDepartmentValueChange(int value)
    {
        await HandleDepartmentSelectedEvent.InvokeAsync(value);
        ChangeSelectedDepartment(GetDepartmentNameByID(value));
    }

    [Parameter] public EventCallback<int> HandleSectionSelectedEvent { get; set; }
    public void OnSectionValueChange(int value)
    {
        EmployeeGroup2.SectionId = value;
        ChangeSelectedSection(GetSectionNameByID(value));
    }

    // Helper methods for country, city, town, department, and section

    public void ChangeSelectedCountry(string selected) => selectedCountry = selected;

    public void ChangeSelectedCity(string selected) => selectedCity = selected;

    public void ChangeSelectedTown(string selected) => selectedTown = selected;

    public void ChangeSelectedDepartment(string selected) => selectedDepartment = selected;

    public void ChangeSelectedSection(string selected) => selectedSection = selected;

    public void ChangeSelectedGeneralDepartment(string selected) => selectedGeneralDepartment = selected;

    public string GetCountryNameByID(int id) =>
        Countries.FirstOrDefault(x => x.Id == id)?.Name!;

    public string GetCityNameByID(int id) =>
        Cities.FirstOrDefault(x => x.Id == id)?.Name!;

    public string GetTownNameByID(int id) =>
        Towns.FirstOrDefault(x => x.Id == id)?.Name!;

    public string GetDepartmentNameByID(int id) =>
        Departments.FirstOrDefault(x => x.Id == id)?.Name!;

    public string GetSectionNameByID(int id) =>
        Sections.FirstOrDefault(x => x.Id == id)?.Name!;

    public string GetGeneralDepartmentNameByID(int id) =>
        GeneralDepartments.FirstOrDefault(x => x.Id == id)?.Name!;
}