@implements IDisposable

@if (allState.ShowState)
{
    <Card Border="Border.Secondary" Background="Background.Dark" TextColor="TextColor.White">
        <CardHeader TextColor="TextColor.White">
            <i class="fa-brands fa-slack text-secondary"></i>
            Section
            <CloseButton Class="float-end" onclick="@StateClicked"></CloseButton>
        </CardHeader>
        <CardBody>
            <Div Style="min-height: fit-content; max-height: 900px; overflow-y: auto;">
                <Table Background="Background.Dark">
                    <TableHeader Style="border-collapse: separate; border-spacing: 0;">
                        <TableRow Background="Background.Secondary" TextColor="TextColor.White">
                            <TableHeaderCell>#</TableHeaderCell>
                            <TableHeaderCell>Id</TableHeaderCell>
                            <TableHeaderCell>City</TableHeaderCell>
                            <TableHeaderCell>State</TableHeaderCell>
                            <TableHeaderCell>Action</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @if (States != null && States.Count > 0)
                        {
                            int count = 1;
                            foreach (var item in States)
                            {
                                var index = count.ToString();

                                <TableRow>
                                    <TableRowHeader>@index</TableRowHeader>
                                    <TableRowCell>@item.Id</TableRowCell>
                                    <TableRowCell>@item.City!.Name</TableRowCell>
                                    <TableRowCell>@item.Name</TableRowCell>
                                    <TableRowCell Class="flex gap-4">
                                        <i class="fa fa-pencil text-accent cursor-pointer"
                                           @onclick="()=>EditClicked(item)"></i>
                                        <i class="fa fa-trash text-danger cursor-pointer"
                                           @onclick="()=>DeleteClicked(item)"></i>
                                    </TableRowCell>
                                </TableRow>
                                ++count;
                            }
                        }
                        else
                        {
                            <TableRow>
                                <TableRowCell ColumnSpan="5" TextColor="TextColor.Warning" TextAlignment="TextAlignment.Center">
                                    No State Added yet!
                                </TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </Div>
        </CardBody>
        <CardFooter>
            <Form>
                <Button Color="Color.Primary" @onclick="@AddClicked">Add State</Button>
            </Form>
        </CardFooter>
    </Card>
}

<StateDialog @ref="stateDialog"
               HandleSaveOperationEvent="HandleSaveOperationEvent"
               State="State" 
               Cities="Cities"/>


@code {
    [Inject] IToastService? ToastService { get; set; }
    [Inject] IMessageService? MessageService { get; set; }

    StateDialog? stateDialog;
    State State = new();

    public string Title { get; set; } = "";
    public List<City> Cities { get; set; } = new();
    public List<State> States { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetStates();
        await GetCities();
        allState.Action += StateHasChanged;
    }

    public async Task GetStates()
    {
        States = await stateService.GetAll(ClientConstants.StateBaseUrl);
    }

    public async Task GetCities()
    {
        Cities = await cityService.GetAll(ClientConstants.CityBaseUrl);
    }

    void OpenDialog()
    {
        stateDialog?.OpenDialog();
    }

    void AddClicked()
    {
        stateDialog?.ChangeTitle("Add");
        stateDialog?.ChangeSelectedCity("");
        State = new();
        OpenDialog();
    }

    // Add or Update
    private async Task HandleSaveOperationEvent(State state)
    {
        bool successCheck = false;
        if (State.Id > 0)
        {
            var result = await stateService.Update(state, ClientConstants.StateBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await stateService.Insert(state, ClientConstants.SectionBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            state = new();
            await GetStates();
            stateDialog?.ChangeTitle("Add");
        }
    }

    // Edit
    private void EditClicked(State state)
    {
        stateDialog?.ChangeTitle("Update");
        State = state;
        OpenDialog();
    }

    // Delete
    private async Task DeleteClicked(State state)
    {
        bool confirm = await MessageService!.Confirm($"Are you sure you want to delete {state.Name}?", "Delete Confirmation");
        if (!confirm) return;

        var response = await stateService.DeleteById(state.Id, ClientConstants.StateBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetStates();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            //await ToastService!.Success(message, "Success");
            return true;
        }
        else
        {
            await ToastService!.Error(message, "Error");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }

    // Close Button
    private void StateClicked()
    {
        allState.StateClicked(false);
    }
}
