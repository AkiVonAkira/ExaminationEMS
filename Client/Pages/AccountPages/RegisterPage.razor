@page "/identity/account/register"
@using Client.Pages.OtherPages
@using System.ComponentModel.DataAnnotations
@layout AuthenticationLayout

<div class="container mx-auto h-screen w-64 sm:w-96 flex flex-col justify-center align-center">
    <div class="mb-4">
        <Validations @ref="validations" Mode="ValidationMode.Auto" Model="@User">
            <Card Class="text-white bg-dark !bg-opacity-50">
                <CardBody>
                    <CardTitle>Register</CardTitle>
                    <div class="container">
                        <div class="flex flex-row justify-center align-center">
                            <img class="rounded ratio-1x1"
                                 src="../images/logos/koalaW.png" height="100" width="100" />
                        </div>
                    </div>
                    <Validation>
                        <Field Vertical>
                            <FieldLabel ColumnSize="ColumnSize.Is2">Full Name *</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is10">
                                <TextEdit Role="TextRole.Text" Placeholder="Enter your full name"
                                          @bind-Text="@User.Fullname">
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field Vertical>
                            <FieldLabel ColumnSize="ColumnSize.Is2">Email *</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is10">
                                <TextEdit Role="TextRole.Email" Placeholder="Enter email"
                                          @bind-Text="@User.Email">
                                </TextEdit>
                                <FieldHelp>We'll never share your email with anyone else.</FieldHelp>
                            </FieldBody>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field Vertical>
                            <FieldLabel ColumnSize="ColumnSize.Is2">Password *</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is10">
                                <TextEdit Role="TextRole.Password" Placeholder="Password"
                                          @bind-Text="@User.Password" autocomplete="new-password">
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                    <Validation Validator="@ValidatePassword2Auto">
                        <Field Vertical>
                            <FieldLabel ColumnSize="ColumnSize.Is2">Confirm Password *</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is10">
                                <TextEdit Role="TextRole.Password" Placeholder="Confirm Password"
                                        @bind-Text="@User.ConfirmPassword" autocomplete="new-password">
                                    <Feedback>
                                        <ValidationError>Password does not match!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                    <div class="flex flex-row justify-center align-center mt-3 px-2">
                        @if (ShowLoadingButton)
                        {
                            <ButtonLoadingSpinner></ButtonLoadingSpinner>
                        }
                        else
                        {
                            <Button Color="Color.Primary" Clicked="@HandleRegistration" Type="ButtonType.Submit">
                                <i class="fa fa-right-to-bracket mr-2"></i> Register
                            </Button>
                        }
                    </div>
                    <CardFooter>
                        <span>
                            Have an account? |
                            <a class="btn-link" href="identity/account/login">Sign In Here</a>
                        </span>
                    </CardFooter>
                </CardBody>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <ListGroup Flush Class="p-2 !border-y-0 !bg-transparent">
                        <ListGroupItem Color="Color.Danger" Class="rounded">@errorMessage</ListGroupItem>
                    </ListGroup>
                }
            </Card>
        </Validations>
    </div>
    <ButtonReturnHome></ButtonReturnHome>
</div>

@code {
    Validations? validations;

    public bool ShowLoadingButton { get; set; } = false;
    public string errorMessage { get; set; } = "";
    Register User = new();

    [CascadingParameter] public Task<AuthenticationState>? authenticationStateTask { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    async Task HandleRegistration()
    {
        if (await validations!.ValidateAll())
        {
            ShowLoadingButton = true;
            var result = await accountService.CreateAsync(User);
            if (result.Flag)
            {
                User = new();
                NavManager.NavigateTo("/identity/account/login");
            }
            else
            {
                errorMessage = result.Message;
            }
            ShowLoadingButton = false;
            errorMessage = result.Message;
        }
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await authenticationStateTask!).User;
        bool isAuthenticated = user.Identity!.IsAuthenticated;
        if (isAuthenticated)
        {
            NavManager.NavigateTo("/home/dashboard");
        }
    }

    void ValidatePassword2Auto(ValidatorEventArgs e)
    {
        var password2 = Convert.ToString(e.Value);

        if (password2?.Length < 5)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Password must be at least 5 characters long!";
        }
        else if (password2 != User.Password)
        {
            e.Status = ValidationStatus.Error;
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }
}